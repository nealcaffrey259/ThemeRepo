--stupid autoupdater
local async_http, filesystem, io, menu, util = async_http, filesystem, io, menu, util
local root<const> = menu.my_root()

local function get_github_auth()
	if file := io.open($'{filesystem.resources_dir()}ThemeRepo\\.github', 'r') then
		local token = file:read('a')
		file:close()
		return token:startswith('ghp_') and token:len() == 40 and token
	end
	return nil
end

local function fetch(request_url, callback)
	local resp = false
	async_http.init(request_url, nil, function(body, headers, status_code)
		switch status_code do
			case 200:
				util.try_run(callback, body, headers, status_code)
			break
			case 403:
				for i = 1, 5 do
					util.toast('You are currently being ratelimited by Github.')
				end
				util.stop_script()
			break
		end
		resp = true
	end, function()
		resp = true
	end)
	if token := get_github_auth() then
		async_http.add_header('Authorization', $'Bearer {token}')
	end
	async_http.dispatch()

	repeat
		util.yield_once()
	until resp
end

if async_http.have_access() then
	local SCRIPT_VERSION = '1.5.3'
	local resp = false
	-- TODO: replace with main branch
	fetch(
		'raw.githubusercontent.com/stagnate6628/stand-themerepo/1.5.3/version',
		function(body, headers, status_code)
			if soup.version_compare(SCRIPT_VERSION, body) == -1 then
				root:action(
					'Update Script',
					{},
					$'"{body}" is available, you are currently on "{SCRIPT_VERSION}".',
					function()
						fetch(
							-- TODO: replace with main branch
							'raw.githubusercontent.com/stagnate6628/stand-themerepo/1.5.3/ThemeRepo.pluto',
							function(body_)
								local f = assert(io.open($'{filesystem.scripts_dir()}{SCRIPT_RELPATH}', 'wb'))
								assert(f:write(body_))
								f:close()
								util.restart_script()
						end)
					end
				)
				root:divider('')
			end
		end
	)
end

local og_io_copyto = io.copyto
io.copyto = function (from, to)
	if not filesystem.is_dir(to:match('^(.+)[\\/]')) then
		filesystem.mkdirs(to:match('^(.+)[\\/]'))
	end

	og_io_copyto(from, to)
end

local function write_file(path, body)
	if not filesystem.is_dir(path:match('^(.+)[\\/]')) then
		filesystem.mkdirs(path:match('^(.+)[\\/]'))
	end

	local file = assert(io.open(path, 'wb'))
	file:write(body)
	file:close()
end

local function download_file(request_url, file_path)
	fetch(request_url, function(body, headers, status_code)
		if type(file_path) == 'string' then
			file_path = {file_path}
		end

		for file_path as path do
			write_file(path, body)
		end
	end)
end

local function empty_dir(dir)
	if not filesystem.is_dir(dir) then
		return
	end

	io.remove(dir, true)

	repeat
		util.yield_once()
	until not filesystem.is_dir(dir)

	print($'creating {dir}')
	filesystem.mkdirs(dir)

	util.yield(100)
end

local stand_ref<const> = menu.ref_by_path('Stand')
local profiles_ref<const> = stand_ref:refByRelPath('Profiles')
local lua_scripts_ref<const> = stand_ref:refByRelPath('Lua Scripts')

local stand_dir<const> = filesystem.stand_dir()
local header_dir<const> = $'{stand_dir}Headers\\Custom Header\\'
local theme_dir<const> = $'{stand_dir}Theme\\'
local custom_dir<const> = $'{theme_dir}Custom\\'
local tabs_dir<const> = $'{theme_dir}Tabs\\'

local resources_dir<const> = $'{filesystem.resources_dir()}ThemeRepo\\'
local themes_dir<const> = $'{resources_dir}Themes\\'
local headers_dir<const> = $'{resources_dir}Headers\\'

local display_download_status = true
local apply_to_active_profile = false
local is_downloading = false

local function reload_textures()
	menu.ref_by_path('Stand>Settings>Appearance>Textures>Reload Textures'):trigger()
end

local function reload_font()
	menu.ref_by_path('Stand>Settings>Appearance>Font & Text>Reload Font'):trigger()
end

local function header_hide()
	menu.ref_by_path('Stand>Settings>Appearance>Header>Header>Be Gone'):trigger()
end

local function header_custom()
	menu.ref_by_path('Stand>Settings>Appearance>Header>Header>Custom'):trigger()
end

local function get_all_files(path, files = {})
	fetch(
		$'api.github.com/repos/stagnate6628/stand-themerepo/contents/{path}',
		function(body, headers, status_code)
			body = soup.json.decode(body)

			for body as file do
				if file.type == 'file' then
					table.insert(files, file.path)
					continue
				end
				get_all_files(file.path, files)
			end
		end
	)

	return files
end

local function get_manifest(path, type, menu_name)
	local files = {}
	path ..= $'{menu_name}\\.manifest.'

	if not filesystem.is_regular_file(path) then
		files = get_all_files($'{type}/{menu_name}')
		write_file(path, table.concat(files, '\n'))
	else
		local file = io.open(path, 'r')
		files = file:read('*a'):split('\n')
		file:close()
	end

	return files
end

local function load_theme(theme_name)
	util.toast($'Loading "{theme_name}".')

	reload_textures()
	reload_font()

	profiles_ref:trigger()
	util.yield(100)
	stand_ref:trigger()
	util.yield(100)
	profiles_ref:trigger()

	lua_scripts_ref:trigger()
	util.yield(100)
	stand_ref:trigger()
	util.yield(100)
	lua_scripts_ref:trigger()
	util.yield(100)

	local ref = profiles_ref:refByRelPath(theme_name)
	if not ref:isValid() then
		util.toast($'Reference to "Profiles>{theme_name}" could not be found.')
		return
	end

	if apply_to_active_profile then
  		local meta_state = util.read_colons_and_tabs_file($'{stand_dir}Meta State.txt')
		local active_profile = meta_state['Active Profile'] or 'Main'

		local path = $'{stand_dir}Profiles\\{theme_name}.txt'

		-- TODO: apply default state to these settings then run?
		ref = menu.ref_by_path($"Stand>Profiles>{active_profile}")

		for k, v in util.read_colons_and_tabs_file(path) do
			if k:startswith('Stand>Settings>Appearance') or
			   	k:startswith('Stand>Lua Scripts') or
			  	k:startswith('Players>Settings>Tags') then

				local r = menu.ref_by_path($'{k}>{v}')
				if r:isValid() then
					r:trigger()
				else
					r = menu.ref_by_path(k)
					if r:isValid() then
						r:trigger(v)
					end
				end
			end
			util.yield_once()
		end

		util.toast('Done! Make sure you save the profile if you want to keep its appearance.')
		return
	end

	ref:refByRelPath('Load'):trigger()
	ref:refByRelPath('Load'):trigger()
	ref:refByRelPath('Active'):trigger()
	util.yield(100)

	util.toast('Done!')
end

local function download_theme(theme_name)
	empty_dir(theme_dir)
	empty_dir(header_dir)

	header_hide()

	local files = get_manifest(themes_dir, 'Themes', theme_name)
	local i = 0

	util.create_tick_handler(function()
		if i == #files then
			return false
		end
		if display_download_status then
			util.draw_debug_text($'{theme_name}: {i}/{#files}')
		end
		return true
	end)

	for files as file do
		++i

		local base_path = file:gsub('/', '\\')
		local local_path = base_path:gsub('Themes\\(.-)\\', '')
		local dir = local_path:match('^(.-)[\\/][^\\/]*$')
		local paths = { $'{resources_dir}{base_path}' }

		if dir and dir != 'Interaction Header' then
			table.insert(paths, $'{stand_dir}{local_path}')
		end

		if filesystem.is_regular_file(paths[1]) then
			if paths[2] then
				io.copyto(paths[1], paths[2])
			end
			continue
		end

		download_file(
			$'raw.githubusercontent.com/stagnate6628/stand-themerepo/main/{file}',
			paths
		)
	end

	load_theme(theme_name)
end

local function download_header(header_name)
	empty_dir(header_dir)

	header_hide()

	local files = get_manifest(headers_dir, 'Headers', header_name)
	local i = 0

	util.create_tick_handler(function()
		if i == #files or not display_download_status then
			return false
		end

		util.draw_debug_text($'{header_name}: {i}/{#files}')
		return true
	end)

	for files as file do
		++i
		local base_path = file:gsub('/', '\\')
		local paths = { $'{resources_dir}{base_path}' }
		table.insert(paths, header_dir .. paths[1]:match('[^\\/]*$'))

		if filesystem.is_regular_file(paths[1]) and not filesystem.is_regular_file(paths[2]) then
			io.copyto(paths[1], paths[2])
			continue
		end

		download_file(
			$'raw.githubusercontent.com/stagnate6628/stand-themerepo/main/{file}',
			paths
		)
	end

	header_custom()
end

local all_children = {}
do
	for { 'Headers', 'Themes' } as v do
		local file_name = $'{v:lower()}.txt'
		local path = $'{resources_dir}{file_name}'

		if not filesystem.is_regular_file(path) then
			if not async_http.have_access() then
				util.yield_once()
				util.toast('You are missing required files and internet access is disabled.')
				util.stop_script()
			end
			util.toast($'Downloading "{file_name}"')
			download_file(
				$'raw.githubusercontent.com/stagnate6628/stand-themerepo/main/{file_name}',
				path
			)
		end

		local f = assert(io.open(path, 'r'))
		local body = f:read('*a'):split('\n')
		f:close()

		local fn = v == 'Headers' ? download_header : download_theme
		local ref = root:list_action(v, {}, '', body, function(_, menu_name)
			if is_downloading then
				util.toast('A download has already started. If you encountered an error during a download previously, restart the script.')
				return
			end

			is_downloading = true

			util.toast($'Downloading "{menu_name}".')
			fn(menu_name)

			--idk
			util.yield(100)

			is_downloading = false
		end)

		for ref:getChildren() as child do
			table.insert(all_children, child)
		end
	end
end

local config_root = root:list('Configuration', {}, '')
config_root:divider('General')
config_root:toggle('Show Download Status', {}, '', function(s)
	display_download_status = s
end, display_download_status)

config_root:divider('Themes')
config_root:toggle('Apply To Active Profile', {}, 'Not guaranteed to apply properly. Reliability seems to be a hit or miss; it may help to use a fresh profile or default appearance.', function(s)
	apply_to_active_profile = s
end, apply_to_active_profile)

config_root:divider('Utilities')
local search_root = config_root:list('Search', {}, '')
search_root:text_input('Query', {'themereposearch'}, '', function(input, click_type)
	if input != '' and table.contains({ 1, 4 }, click_type) != nil then
		if not search_root:isFocused() then
			search_root:trigger()
		end

		for search_root:getChildren() as child do
			if child:getType() == COMMAND_INPUT then
				continue
			end
			child:delete()
		end
		menu.collect_garbage()

		for all_children as child do
			if child.menu_name:lower():contains(input:lower()) then
				search_root:link(child, true)
			end
		end

		if #search_root:getChildren() == 1 then
			util.toast('No results found.')
		end
	end
end):setTemporary()

config_root:list_action('Reset', {}, '', {
	{ 'Theme', {}, $'The "Theme" folder.\n{theme_dir}' },
	{ 'Header', {}, $'The "Headers" folder.\n{header_dir}' },
	{ 'Font', {}, $'The "menu font" file.\n{theme_dir}Font.spritefont' },
	{ 'Tags', {}, $'The menu "tags".\n{custom_dir}' },
	{ 'Tabs', {}, $'The menu "tabs".\n{tabs_dir}' },
	{ 'Appearance', {}, 'Reverts any menu appearance setting to its original state. Make sure to save the profile to keep the changes.' },
}, function(index, _, click_type)
	menu.show_warning(config_root, click_type, 'This action is irreversible, proceed?', function()
		switch index do
			case 1:
				empty_dir(theme_dir)
				reload_textures()
				reload_font()
			break
			case 2:
				empty_dir(header_dir)
				header_hide()
				header_custom()
				header_hide()
			break
			case 3:
				io.remove($'{theme_dir}Font.spritefont')
				reload_font()
			break
			case 4:
				empty_dir(custom_dir)
				reload_textures()
			break
			case 5:
				empty_dir(tabs_dir)
				reload_textures()
			break
			case 6:
				local meta_state = util.read_colons_and_tabs_file($'{stand_dir}Meta State.txt')
				local active_profile = meta_state['Active Profile'] or 'Main'

				for k in util.read_colons_and_tabs_file(
					$'{stand_dir}Profiles\\{active_profile}.txt'
				) do
					if k:startswith('Stand>Settings>Appearance') then
						local ref = menu.ref_by_path(k)
						if ref:isValid() then
							ref:applyDefaultState()
						end
					end
					util.yield_once()
				end
			break
		end
	end)
end)
config_root:list_action('Update', {}, '', {
	{ 'All', {}, 'Updates both Header and Theme lists.' },
	'Headers',
	'Themes'
}, function(idx, menu_name)
	if idx == 1 then
		for { 'headers', 'themes' } as v do
			local path = $'{resources_dir}{v}.txt'
			io.remove(path)
			assert(not filesystem.is_regular_file(path))
		end
		util.restart_script()
	end

	local name = $'{menu_name:lower()}.txt'
	download_file(
		$'raw.githubusercontent.com/stagnate6628/stand-themerepo/main/{name}',
		$'{resources_dir}{name}'
	)
	util.restart_script()
end)