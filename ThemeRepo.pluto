-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, 'auto-updater')
if not status then
  local auto_update_complete = nil
  util.toast('Installing auto-updater...', util.toast_ALL)
  async_http.init('raw.githubusercontent.com', '/hexarobi/stand-lua-auto-updater/main/auto-updater.lua',
      function(result, headers, status_code)
        local function parse_auto_update_result(result, headers, status_code)
          local error_prefix = 'Error downloading auto-updater: '
          if status_code ~= 200 then
            util.toast(error_prefix .. status_code, util.toast_ALL)
            return false
          end
          if not result or result == '' then
            util.toast(error_prefix .. 'Found empty file.', util.toast_ALL)
            return false
          end
          filesystem.mkdir(filesystem.scripts_dir() .. 'lib')
          local file = io.open(filesystem.scripts_dir() .. 'lib\\auto-updater.lua', 'wb')
          if file == nil then
            util.toast(error_prefix .. 'Could not open file for writing.', util.toast_ALL)
            return false
          end
          file:write(result)
          file:close()
          util.toast('Successfully installed auto-updater lib', util.toast_ALL)
          return true
        end
        auto_update_complete = parse_auto_update_result(result, headers, status_code)
      end, function()
        util.toast('Error downloading auto-updater lib. Update failed to download.', util.toast_ALL)
      end)
  async_http.dispatch()
  local i = 1
  while (auto_update_complete == nil and i < 40) do
    util.yield(250)
    i = i + 1
  end
  if auto_update_complete == nil then
    error('Error downloading auto-updater lib. HTTP Request timeout')
  end
  auto_updater = require('auto-updater')
end
if auto_updater == true then
  error('Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again')
end

local async_http, filesystem, io, menu, util = async_http, filesystem, io, menu, util

if math.random() > 0.85 then
	util.toast('Please make backups as needed. This will not be done for you.')
end

local root = menu.my_root()
root:action('Restart', {}, '', util.restart_script)

local inspect = require 'lib/inspect'
local function log(what)
	util.log(inspect(what))
end

menu.ref_by_path('Stand>Lua Scripts>Settings>Presets>Developer'):trigger()
menu.ref_by_path('Stand>Empty Log.txt'):trigger()

local function get_github_auth() 
	if file := io.open(filesystem.resources_dir() .. 'ThemeRepo\\.github', 'r') then
		local token = file:read('a')
		file:close()
		return token:startswith('ghp_') and token:len() == 40 and token
	end
	return nil
end

local function fetch(host, path, callback)
	local finished = false
	async_http.init(host, path, function(body, headers, status_code)
		if status_code == 403 then
			local expire_at = os.date('%d-%m %H:%M', headers['X-Ratelimit-Reset'])
			for i = 1, 5 do
				util.toast($'You are currently being ratelimited by GitHub.\nThis will expire at {expire_at}.')
			end
			util.stop_script()
		elseif status_code == 404 then
			goto continue
		end

		pcall(callback, body, headers, status_code)

		::continue::
		finished = true
	end, function()
		util.toast($'Request to {host}{path} failed to send.')
		finished = true
	end)
	if token := get_github_auth() then
		async_http.add_header('Authorization', 'Bearer ' .. token)
	end
	async_http.dispatch()

	repeat
		util.yield()
	until finished
end

local function make_request(path, callback)
	fetch('https://api.github.com', '/repos/stagnate6628/stand-themerepo/contents/' .. path, function(body, headers, status_code) 
		pcall(callback, body, headers, status_code)
	end)
end

local function write_file(path, body)
	if not filesystem.is_dir(path:match('^(.+)[\\/]')) then
		filesystem.mkdirs(path:match('^(.+)[\\/]'))
	end

	local file = io.open(path, 'wb')
	file:write(body)
	file:close()
end

local function download_file(host, path, file_path, callback)
	fetch(host, path, function(body, headers, status_code)
		if type(file_path) == 'string' then
			file_path = {file_path}
		end

		for file_path as path do
			write_file(path, body)
		end
		log($'Wrote {path} to {file_path}')
	end)
end

local function empty_dir(dir)
  for io.listdir(dir) as path do
  	if filesystem.is_regular_file(path) then
  		io.remove(path)
  		continue
  	end

  	empty_dir(path)
  	io.remove(path)
  end
end

local stand_dir = filesystem.stand_dir()

local header_dir = stand_dir .. 'Headers\\Custom Header\\'
local theme_dir = stand_dir .. 'Theme\\'
local custom_dir = theme_dir .. 'Custom\\'
local tabs_dir = theme_dir .. 'Tabs\\'

local resources_dir = filesystem.resources_dir() .. 'ThemeRepo\\'
local themes_dir = resources_dir .. 'Themes\\'
local headers_dir = resources_dir .. 'Headers\\'
local backups_dir = resources_dir .. 'Backups\\'

local display_download_status = true
local apply_to_active_profile = false

local is_downloading = false

local function debug_log(msg)
  local log_path = resources_dir .. 'log.txt'
  if not io.exists(log_path) then
    io.open(log_path, 'wb'):close()
  end

  local log_file = io.open(log_path, 'a+')
  log_file:write('[' .. os.date('%x %I:%M:%S %p') .. '] ' .. msg .. '\n')
  log_file:close()
end

local function reload_textures()
	menu.ref_by_path('Stand>Settings>Appearance>Textures>Reload Textures'):trigger()
end

local function reload_font()
	menu.ref_by_path('Stand>Settings>Appearance>Font & Text>Reload Font'):trigger()
end

local function header_hide()
	menu.ref_by_path('Stand>Settings>Appearance>Header>Header>Be Gone'):trigger()
end

local function header_custom()
	menu.ref_by_path('Stand>Settings>Appearance>Header>Header>Custom'):trigger()
end

local function get_all_files(path, files = {})
	path ..= '?ref=refactor-downloader'
	make_request(path, function(body, headers, status_code)
		body = soup.json.decode(body)

		for body as file do
			if file.type == 'file' then
				table.insert(files, file.path)
				continue
			end

			get_all_files(file.path, files)
		end
	end)

	return files
end

local function load_theme(theme_name)
	util.toast($'Loading {theme_name}...')

	reload_textures()
	reload_font()

	menu.ref_by_path('Stand>Profiles'):trigger()
	util.yield(50)
	menu.ref_by_path('Stand'):trigger()
	util.yield(50)
	menu.ref_by_path('Stand>Profiles'):trigger()

	menu.ref_by_path('Stand>Lua Scripts'):trigger()
	util.yield(50)
	menu.ref_by_path('Stand'):trigger()
	util.yield(50)
	menu.ref_by_path('Stand>Lua Scripts'):trigger()

	local ref = menu.ref_by_path($'Stand>Profiles>{theme_name}')
	if apply_to_active_profile then
		-- it may be better to search through stand>profiles and find the ref with Active
		-- possible edge case: user has profile x active but there is no x.txt
  		local meta_state = util.read_colons_and_tabs_file($'{stand_dir}Meta State.txt')
		local active_profile = meta_state['Active Profile'] or 'Main'
		
		local path = $'{stand_dir}Profiles\\{theme_name}.txt'

		ref = menu.ref_by_path($'Stand>Profiles>{active_profile}')

		for k, v in util.read_colons_and_tabs_file(path) do
			if k:startswith('Stand>Settings>Appearance') or 
			   	k:startswith('Stand>Lua Scripts') or 
			  	k:startswith('Players>Settings>Tags') then

				local r = menu.ref_by_path($'{k}>{v}')
				if not r:isValid() then
					menu.trigger_command(menu.ref_by_path(k), v)
				else
					r:trigger()
				end
			end
			util.yield()
		end

		-- TODO: remove script refs from profile
		-- void util.write_colons_file(string file, table<string,string> data) 
		-- or just ignore it

		menu.ref_by_path('Stand>Tutorial>Dismiss'):trigger()
		util.yield(50)
		ref:refByRelPath('Save'):trigger()
	end

	ref:refByRelPath('Load'):trigger()
	util.yield(50)
	ref:refByRelPath('Active'):trigger()
	util.yield(50)
	ref:refByRelPath('Load'):trigger()

	util.toast('Done!')
end

local function download_theme(theme_name)
	empty_dir(theme_dir)
	empty_dir(header_dir)

	header_hide()

	local files
	local path = themes_dir .. theme_name .. '\\.manifest'

	if not filesystem.exists(path) then
		files = get_all_files('Themes/' .. theme_name)
		write_file(path, table.concat(files, '\n'))
		debug_log($'Created manifest for theme: {theme_name}')
	else
		local f = io.open(path, 'r')
		files = f:read('*a'):split('\n')
		f:close()
		debug_log($'Found manifest for theme: {theme_name}')
	end

	local i = 0
	if display_download_status then
		util.create_tick_handler(function()
			if i == #files then
				return false
			end
			
			util.draw_debug_text($'{theme_name}: {i}/' .. #files)
			return true
		end)
	end

	for files as file do
		i += 1

		local base_path = file:gsub('/', '\\')
		local local_path = base_path:gsub('Themes\\(.-)\\', '')
		local dir = local_path:match('^(.-)[\\/][^\\/]*$')
		local paths = {resources_dir .. base_path}

		if dir then
			table.insert(paths, stand_dir .. local_path)
		end
		
		if filesystem.exists(paths[1]) and (not paths[2] or filesystem.exists(paths[2])) then
			log($'Found {file}')
			continue
		end

		download_file(
			'https://raw.githubusercontent.com',
			$'/stagnate6628/stand-themerepo/refactor-downloader/{file}',
			paths
		)
		log($'Downloaded {file}')
	end

	load_theme(theme_name)
end

local function download_header(header_name)
	empty_dir(header_dir)

	header_hide()

	local files
	local path = headers_dir .. header_name .. '\\.manifest'

	if not filesystem.exists(path) then
		files = get_all_files('Headers/' .. header_name)
		write_file(path, table.concat(files, '\n'))
		debug_log($'Created manifest for theme: {header_name}')
	else
		local f = io.open(path, 'r')
		files = f:read('*a'):split('\n')
		f:close()
		debug_log($'Found manifest for header: {header_name}')
	end

	local i = 0
	if display_download_status then
		util.create_tick_handler(function()
			if i == #files then
				return false
			end
			
			util.draw_debug_text($'{header_name}: {i}/' .. #files)
			return true
		end)
	end

	for files as file do
		i += 1
		
		local base_path = file:gsub('/', '\\')
		local paths = {resources_dir .. base_path}
		table.insert(paths, header_dir .. paths[1]:match('[^\\/]*$'))

		if filesystem.exists(paths[1]) and not filesystem.exists(paths[2]) then
			io.copyto(paths[1], paths[2])
			continue
		end
		
		download_file(
			'https://raw.githubusercontent.com',
			$'/stagnate6628/stand-themerepo/refactor-downloader/{file}',
			paths
		)
	end
	
	if math.random() > 0.86 then
		util.toast('Save the header to the Active profile to use it on start.')
	end

	header_custom()
	
end

do
	for { 'Headers', 'Themes' } as v do
		local file_name = v:lower() .. '.txt'

		local f = io.open(resources_dir .. file_name, 'r')
		if not f then
			util.toast($'Downloading missing file ({file_name})...')
			download_file(
				'https://raw.githubusercontent.com',
				$'/stagnate6628/stand-themerepo/main/{e}.txt',
				resources_dir .. file_name
			)
			f = io.open(resources_dir .. file_name, 'r')
		end
		local body = f:read('*a'):split('\n')
		f:close()

		local fn = v == 'Headers' ? download_header : download_theme
		root:list_action(v, {}, '', body, function(_, menu_name, click_type)
			if is_downloading then
				util.toast('It appears that a download is active. If that is not the case, then restart the script.')
				return
			end
			
			is_downloading = true
			
			util.toast($'Downloading {menu_name}...')
			fn(menu_name)

			is_downloading = false
		end)
	end
end

local config_root = root:list('Configuration', {}, '')
config_root:toggle('Apply to Active Profile', {}, 'Attempts to apply the downloaded theme appearance to the current profile. The implementation may not be perfect so you may want to keep this disabled or backup the active profile.', function(s)
	apply_to_active_profile = s
end, apply_to_active_profile)
config_root:toggle('Display Download Status', {}, 'Uses the "Info Text" system to show what is being downloaded and the file count.', function(s)
	display_download_status = s
end, display_download_status)
config_root:list_action('Reset', {}, 'Restores the associated file(s) to their default state.', { 'Theme', 'Font', 'Header' }, function(index)
	switch index do
		case 1:
			empty_dir(theme_dir)
			reload_textures()
			reload_font()
		break
		case 2:
			io.remove(theme_dir .. 'Font.spritefont')
			reload_font()
		break
		case 3:
			empty_dir(header_dir)
			header_hide()
			header_custom()
			header_hide()
		break
	end
end)
config_root:list_action('Update', {}, '', { 'Themes', 'Headers' }, function(_, menu_name)
	local name = menu_name:lower() .. '.txt'
	download_file(
		'https://raw.githubusercontent.com',
		'/stagnate6628/stand-themerepo/main/' .. name,
		resources_dir .. name
	)
	util.restart_script()
end)