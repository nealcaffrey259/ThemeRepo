-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, 'auto-updater')
if not status then
  local auto_update_complete = nil
  util.toast('Installing auto-updater...', TOAST_ALL)
  async_http.init('raw.githubusercontent.com', '/hexarobi/stand-lua-auto-updater/main/auto-updater.lua',
      function(result, headers, status_code)
        local function parse_auto_update_result(result, headers, status_code)
          local error_prefix = 'Error downloading auto-updater: '
          if status_code ~= 200 then
            util.toast(error_prefix .. status_code, TOAST_ALL)
            return false
          end
          if not result or result == '' then
            util.toast(error_prefix .. 'Found empty file.', TOAST_ALL)
            return false
          end
          filesystem.mkdir(filesystem.scripts_dir() .. 'lib')
          local file = io.open(filesystem.scripts_dir() .. 'lib\\auto-updater.lua', 'wb')
          if file == nil then
            util.toast(error_prefix .. 'Could not open file for writing.', TOAST_ALL)
            return false
          end
          file:write(result)
          file:close()
          util.toast('Successfully installed auto-updater lib', TOAST_ALL)
          return true
        end
        auto_update_complete = parse_auto_update_result(result, headers, status_code)
      end, function()
        util.toast('Error downloading auto-updater lib. Update failed to download.', TOAST_ALL)
      end)
  async_http.dispatch()
  local i = 1
  while (auto_update_complete == nil and i < 40) do
    util.yield(250)
    i = i + 1
  end
  if auto_update_complete == nil then
    error('Error downloading auto-updater lib. HTTP Request timeout')
  end
  auto_updater = require('auto-updater')
end
if auto_updater == true then
  error('Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again')
end

local auto_update_config = {
  source_url = 'https://raw.githubusercontent.com/stagnate6628/stand-themerepo/main/ThemeRepo.pluto',
  script_relpath = SCRIPT_RELPATH,
  verify_file_begins_with = '--',
  check_interval = 86400,
  silent_updates = true,
  script_run_name = 'themerepo'
}
auto_updater.run_auto_update(auto_update_config)

local function write_file(path, body)
  io.makedirs(path:match('^(.+)[\\/]'))
  if file := io.open(path, 'wb') then 
    file:write(body)
    file:close()
  end
end
local function get_github_auth()
  if file := io.open(filesystem.resources_dir() .. 'ThemeRepo\\.github', 'r') then
    local token = file:read('a')
    file:close()
    return token:startswith('ghp_') and token:len() == 40 and token or nil
  end
  return nil
end
local function handle_ratelimit()
  for i = 0, 3 do
    util.toast('You are currently ratelimited by Github. You can let it expire or a use a vpn.')
  end
  util.stop_script()
end
local function make_request(url_path, callback)
  local downloading = true
  async_http.init('https://api.github.com', '/repos/stagnate6628/stand-themerepo/contents/' .. url_path, 
    function(body, headers, status_code)
      downloading = false
      if status_code == 403 then
        handle_ratelimit()
      end
      callback(body, headers, status_code)
  end)
  if token := get_github_auth() then
    async_http.add_header('Authorization', 'Bearer ' .. token)
  end
  async_http.dispatch()

  while downloading do
    util.yield()
  end
end
local function download_file(url_path, file_path, callback)
  local downloading = true
  async_http.init('https://raw.githubusercontent.com', '/stagnate6628/stand-themerepo/main/' .. url_path,
    function(body, headers, status_code)
      if status_code == 403 then
        handle_ratelimit()
      elseif status_code == 404 then
        goto continue
      end

      if type(file_path) == 'string' then
        file_path = {file_path}
      end

      if type(file_path) == 'table' and #file_path > 0 then
        for file_path as path do 
          write_file(path, body)
        end
        pcall(callback, body, headers, status_code)
      end
      ::continue::
      downloading = false
    end, function()
      downloading = false
    end)
  if token := get_github_auth() then
    async_http.add_header('Authorization', 'Bearer ' .. token)
  end
  async_http.dispatch()

  while downloading do
    util.yield()
  end
end

local tree_version<constexpr> = 45
local function get_ref(ref) 
  return menu.ref_by_path(ref, tree_version)
end
local function trigger_command(ref, args)
  local ref_ = get_ref(ref) 
  if not args then
    ref_:trigger()
    return
  end
  menu.trigger_command(ref_, args)
end

local function empty_dir(dir)
  for io.listdir(dir) as path1 do
    if io.isfile(path1) then
      io.remove(path1)
    else 
      for io.listdir(path1) as path2 do
        io.remove(path2)
      end
      io.remove(path1)
    end
  end
end

local io, lib, menu, util = io, lib, menu, util
math.randomseed(util.current_unix_time_seconds()) -- apparently this is good

local path_map<const> = {'Root', 'Theme', 'Tags', 'Tabs', 'Custom Header', 'Lua Scripts'}
local make_dirs<const> = {'Lua Scripts', 'Custom Header', 'Theme\\Custom', 'Theme\\Tabs'}

local bools = {
  ['is_downloading'] = false,
  ['is_header_downloading'] = false,
  ['prevent_redownloads'] = true,
  ['debug'] = false,
  ['combine_profiles'] = false
}

local dirs = {
  ['stand'] = filesystem.stand_dir(),
  ['theme'] = filesystem.stand_dir() .. 'Theme\\',
  ['header'] = filesystem.stand_dir() .. 'Headers\\Custom Header\\',
  ['resources'] = filesystem.resources_dir() .. 'ThemeRepo\\'
}

local root = menu.my_root()
-- headers
local header_root = root:list('Headers', {}, '')
local header_config = header_root:list('Configuration', {}, '')
-- themes
local theme_root = root:list('Themes', {}, '')
local theme_config = theme_root:list('Configuration', {}, '')

theme_config:toggle('Re-use Local Assets', {}, '', function(s)
  bools['prevent_redownloads'] = s
end, true)
theme_config:toggle('Combine Profiles', {}, '', function(s)
  bools['combine_profiles'] = s
end, false)

local lang_list<const> = { "Chinese (Simplified) - 简体中文", "Dutch - Nederlands", "English (UK)", "English (US)",
  "French - Français", "German - Deutsch", "Korean - 한국어", "Lithuanian - Lietuvių", "Polish - Polski",
  "Portuguese - Português", "Russian - русский", "Spanish - Español", "Turkish - Türkçe", "Horny English",
  "Engwish", "Howny Engwish" }
local lang_map<const> = { 'langzh', 'langnl', 'langenuk', 'langenus', 'langfr', 'langde', 'langko', 'langlt', 'langpl',
  'langpt', 'langru', 'langes', 'langtr', 'langsex', 'languwu', 'langhornyuwu' }
local lang_index = 3 -- english uk

theme_config:list_action('Language', {}, 'Some theme fonts may not support a language.', lang_list, function(index)
  lang_index = index
  util.toast('[ThemeRepo] Profile language set to ' .. lang_list[lang_index])
end)

local function log(msg)
  if not bools['debug'] then
    return
  end

  local log_path = dirs['resources'] .. 'log.txt'
  if not io.exists(log_path) then
    io.open(log_path, 'wb'):close()
  end

  local log_file = io.open(log_path, 'a+')
  log_file:write('[' .. os.date('%x %I:%M:%S %p') .. '] ' .. msg .. '\n')
  log_file:close()
end
local function should_copy(file_path)
  return io.exists(file_path) and io.isfile(file_path) and bools['prevent_redownloads']
end
local function hide_header()
  trigger_command('Stand>Settings>Appearance>Header>Header>Be Gone')
end
local function use_custom_header()
  trigger_command('Stand>Settings>Appearance>Header>Header>Custom')
end
local function reload_font()
  trigger_command('Stand>Settings>Appearance>Font & Text>Reload Font')
end
local function reload_textures()
  trigger_command('Stand>Settings>Appearance>Textures>Reload Textures')
end
local function get_active_profile_name()
  local file = util.read_colons_and_tabs_file(dirs['stand'] .. 'Meta State.txt')
  return file['Active Profile'] or 'Main'
end
local function load_profile(profile_name)
  log('Loading ' .. profile_name)

  reload_textures()
  reload_font()

  trigger_command('Stand>Profiles')
  util.yield(100)
  trigger_command('Stand')
  util.yield(100)
  trigger_command('Stand>Profiles')

  trigger_command('Stand>Lua Scripts')
  util.yield(100)
  trigger_command('Stand')
  util.yield(100)
  trigger_command('Stand>Lua Scripts')

  if bools['combine_profiles'] then
    for k, v in util.read_colons_and_tabs_file(
        dirs['resources'] .. 'Themes\\' .. profile_name .. '\\' .. profile_name .. '.txt') do
      if k:startswith('Stand>Settings>Appearance') or 
        k:startswith('Stand>Lua Scripts') or k:startswith('Players>Settings>Tags') then
        local ref = get_ref(k .. '>' .. v)
        if not ref:isValid() then
          trigger_command(k, v)
        else
          ref:trigger()
        end
      end
      util.yield()
    end
    if lang_index != 3 then
      menu.trigger_commands(lang_map[lang_index])
    end
    trigger_command('Stand>Profiles>' .. get_active_profile_name() .. '>Save')
  else
    local ref = get_ref('Stand>Profiles>' .. profile_name)
    ref:refByRelPath('Active'):trigger()

    if lang_index != 3 then
      menu.trigger_command(lang_map[lang_index])
      ref:refByRelPath('Save'):trigger()
    end

    ref:refByRelPath('Load'):trigger()
    util.yield(100)
    ref:refByRelPath('Load'):trigger()
  end

  if menu.are_tabs_visible() then
    get_ref('Self>Movement'):focus()
    util.yield(100)
    get_ref('Self>Movement'):trigger()
  else
    get_ref('Self'):focus()
    util.yield(100)
    get_ref('Self'):trigger()
  end

  log('Done!')
  util.toast('Done!')
end
local function download_theme(theme_name)
  log('Starting ' .. theme_name)

  empty_dir(dirs['theme'])
  empty_dir(dirs['header'])

  io.makedirs(dirs['theme'] .. 'Custom')
  io.makedirs(dirs['theme'] .. 'Tabs')

  local req_url = {}
  table.insert(req_url, 'Themes/' .. theme_name) -- 1=root
  table.insert(req_url, req_url[1] .. '/Theme') -- 2=theme
  table.insert(req_url, req_url[2] .. '/Custom') -- 3=tag_names
  table.insert(req_url, req_url[2] .. '/Tabs') -- 4=tabs
  table.insert(req_url, req_url[1] .. '/Custom Header') -- 5=custom header
  table.insert(req_url, req_url[1] .. '/Lua Scripts') -- 6=lua scripts
  table.insert(req_url, req_url[1] .. '/Interaction Header') --7 only for epsilon/ozark i think?

  for k1, v1 in req_url do
    local i = 0
    local j = 0

    make_request(v1, function(body, headers, status_code)
      if status_code == 404 then
        return
      end

      local success, body = pcall(soup.json.decode, body)
      if not success then
        log('Failed to parse json response [' .. k1 .. ']')
        return
      end

      if k1 == 7 then
        util.toast('Finishing up...')
      end

      j = #body
      for body as v2 do
        if v2.type == 'dir' then
          j -= 1
          continue
        end

        -- v2.path is nil on ratelimit
        local paths = {dirs['resources'] .. v2.path:gsub('/', '\\')}
        local file_name = v2.name

        log(string.format('Downloading %s at path %s', v2.name, v2.path))

        local path 
        switch k1 do
          case 1: -- root
            if file_name:match("%.([^.]+)$") == 'txt' and not bools['combine_profiles'] then
              path = dirs['stand'] .. 'Profiles\\'
            end
          break
          case 2: -- theme
              path = dirs['theme']
          break         
          case 3: -- custom/tags
            path = dirs['theme'] .. 'Custom\\'
          break
          case 4: -- tabs
            path = dirs['theme'] .. 'Tabs\\'
          break
          case 5: -- custom header
            hide_header()
            path = dirs['header']
          break
          case 6: -- lua scripts
            path = filesystem.scripts_dir()
          break
          default: -- for dirs such as "Interaction Header"
            path = dirs['resources'] .. 'Themes\\' .. theme_name .. '\\' .. v2.path:match('.*/(.*)/.*')
          break
        end
        
        if path then 
          table.insert(paths, path .. file_name) 
        end

        if should_copy(paths[1]) and paths[2] != nil then
          io.copyto(paths[1], paths[2])
        else
          download_file(v2.path, paths)
        end
        i += 1
      end
    end)

    repeat
      util.yield(250)
      log($"Waiting at path {v1}: {i}/{j}")
    until i == j

    if k1 != 7 then 
      util.toast(string.format('[ThemeRepo] Finished path %s (%d/6)', path_map[k1], k1))
    end
  end
  load_profile(theme_name)
end
local function empty_list(ref)
  for ref:getChildren() as child do
    if child:getType() == COMMAND_ACTION then
      child:delete()
    end
  end
end
local function download_themes(update)
  local function parse_list(out)
    for out:split('\n') as theme_name do
      if theme_name == '' then continue end
      local action_name = if filesystem.is_dir(dirs['resources'] .. 'Themes\\' .. theme_name) then '[I] ' .. theme_name else theme_name
      theme_root:action(action_name, {}, '', function(click_type)
        if bools['is_downloading'] then
          menu.show_warning(theme_root, click_type,
              'A download has already started. You may need to wait for the theme to finish downloading. Continuing may lead to unexpected issues. Proceed?',
              function()
                bools['is_downloading'] = false
              end)
          return
        end

        bools['is_downloading'] = true
        download_theme(theme_name)
        bools['is_downloading'] = false
      end)
    end
  end

  local path = dirs['resources'] .. 'themes.txt'
  local function download_list()
    download_file('themes.txt', {path}, function(body, headers, status_code)
      log(if not update then 'Creating themes cache' else 'Updating themes cache')
      parse_list(body)
    end)
  end

  if file := io.open(path, 'r') then
    if update then
      empty_list(theme_root)
      download_list()
      trigger_command('Stand>Lua Scripts>ThemeRepo>Themes')
      return
    else
      log('Found local theme list cache')
    end

    parse_list(file:read('*a'))
    file:close()
  else
    download_list()
  end
end
theme_config:action('Update List', {}, '', function()
  download_themes(true)
end)

local function download_headers(update)
  local function parse_list(out)
    for out:split('\n') as v do
      if v == '' then continue end
      local action_name = if filesystem.is_dir(dirs['resources'] .. 'Headers\\' .. v) then '[I] ' .. v else v
      header_root:action(action_name, {}, '', function(click_type)
        if bools['is_header_downloading'] then
          menu.show_warning(header_root, click_type,
              'A download has already started. You may need to wait for the header to finish downloading. Continuing may lead to unexpected issues. Proceed?',
              function()
                bools['is_header_downloading'] = false
              end)
          return
        end

        bools['is_header_downloading'] = true

        empty_dir(dirs['header'])

        make_request('Headers/' .. v, function(body, headers, status_code)
          local success, body = pcall(soup.json.decode, body)
          if not success then
            log('Failed to parse json response [headers]')
            return
          end

          io.makedirs(dirs['resources'] .. 'Headers\\' .. v .. '\\')

          local i = 0
          for body as v2 do
            local paths = {dirs['resources'] .. 'Headers\\' .. v .. '\\' .. v2.name, dirs['header'] .. v2.name}
            if should_copy(paths[1]) then
              io.copyto(paths[1], paths[2])
              log(string.format('Copied header %s (%d/%d)', v2.name, i + 1, #body))
            else
              download_file(v2.path, paths, function()
                log(string.format('Downloaded header %s (%d/%d)', v2.name, i + 1, #body))
              end)
            end
            i += 1
          end

          repeat
            util.yield(250)
          until i == #body
          
          if get_ref('Stand>Settings>Appearance>Header>Header').value == 200 then
            hide_header()
          end
          use_custom_header()

          bools['is_header_downloading'] = false

          if math.random() > 0.8 then
            util.toast('Tip: Make sure to save the current profile to load the Custom Header on start.')
          end
          log('Done!')
          util.toast('Done!')
        end)
      end)
    end
  end

  local path = dirs['resources'] .. 'headers.txt'
  local function download_list()
    download_file('headers.txt', {path}, function(body, headers, status_code)
      log(if not update then 'Creating headers cache' else 'Updating headers cache')
      parse_list(body)
    end)
  end

  if file := io.open(path, 'r') then 
    if update then
      empty_list(header_root)
      download_list()
      trigger_command('Stand>Lua Scripts>ThemeRepo>Headers')
      return
    else
      log('Found local header list cache')
    end
    parse_list(file:read('*a'))
    file:close()
  else
    download_list()
  end
end
header_config:action('Update List', {}, '', function()
  download_headers(true)
end)

local helpers = menu.list(menu.my_root(), 'Helpers', {}, '')
helpers:list_action('Reset', {}, '', { 'Default Textures and Font', 'Default Font', 'Default Headers' }, function(index, menu_name, prev_index, click_type)
  if index == 1 then
    empty_dir(dirs['theme'])
    reload_textures()
    reload_font()
  elseif index == 2 then
    io.remove(dirs['theme'] .. 'Font.spritefont')
    reload_font()
  else 
    empty_dir(dirs['header'])
    hide_header()
  end
end)
helpers:toggle('Debug', {}, 'Logs detailed output to a log file and enables the developer preset.', function(s)
  if s then
    trigger_command('Stand>Lua Scripts>Settings>Presets>Developer')
  else
    trigger_command('Stand>Lua Scripts>Settings>Presets>User')
  end
  bools['debug'] = s
end, false)
helpers:action('Restart Script', {}, '', util.restart_script)
helpers:action('Update Script', {}, '', function()
  auto_update_config.check_interval = 0
  auto_updater.run_auto_update(auto_update_config)
end)

-- idk if this is even a good method
if math.random() > 0.8 then
  util.toast('[ThemeRepo] Remember to maintain backups of textures as needed.')
end

io.makedirs(dirs['resources'])
io.makedirs(dirs['resources'] .. '\\Themes')
io.makedirs(dirs['resources'] .. '\\Headers')

download_themes()
download_headers()

root:hyperlink('Credits', 'https://github.com/stagnate6628/stand-themerepo/wiki/Credits')

util.keep_running()
