-- Auto Updater from https://github.com/hexarobi/stand-lua-auto-updater
local status, auto_updater = pcall(require, 'auto-updater')
if not status then
  local auto_update_complete = nil
  util.toast('Installing auto-updater...', TOAST_ALL)
  async_http.init('raw.githubusercontent.com', '/hexarobi/stand-lua-auto-updater/main/auto-updater.lua',
      function(result, headers, status_code)
        local function parse_auto_update_result(result, headers, status_code)
          local error_prefix = 'Error downloading auto-updater: '
          if status_code ~= 200 then
            util.toast(error_prefix .. status_code, TOAST_ALL)
            return false
          end
          if not result or result == '' then
            util.toast(error_prefix .. 'Found empty file.', TOAST_ALL)
            return false
          end
          filesystem.mkdir(filesystem.scripts_dir() .. 'lib')
          local file = io.open(filesystem.scripts_dir() .. 'lib\\auto-updater.lua', 'wb')
          if file == nil then
            util.toast(error_prefix .. 'Could not open file for writing.', TOAST_ALL)
            return false
          end
          file:write(result)
          file:close()
          util.toast('Successfully installed auto-updater lib', TOAST_ALL)
          return true
        end
        auto_update_complete = parse_auto_update_result(result, headers, status_code)
      end, function()
        util.toast('Error downloading auto-updater lib. Update failed to download.', TOAST_ALL)
      end)
  async_http.dispatch()
  local i = 1
  while (auto_update_complete == nil and i < 40) do
    util.yield(250)
    i = i + 1
  end
  if auto_update_complete == nil then
    error('Error downloading auto-updater lib. HTTP Request timeout')
  end
  auto_updater = require('auto-updater')
end
if auto_updater == true then
  error('Invalid auto-updater lib. Please delete your Stand/Lua Scripts/lib/auto-updater.lua and try again')
end

local async_http, filesystem, io, menu, util = async_http, filesystem, io, menu, util
local og_toast = util.toast
util.toast = function(message)
	og_toast('[ThemeRepo] ' .. message)
end

local root = menu.my_root()
root:action('.', {}, '', util.restart_script)

local inspect = require 'lib/inspect'
local function log(what)
	util.log(inspect(what))
end

menu.ref_by_path('Stand>Lua Scripts>Settings>Presets>Developer'):trigger()
menu.ref_by_path('Stand>Empty Log.txt'):trigger()

local function get_github_auth() 
	if file := io.open(filesystem.resources_dir() .. 'ThemeRepo\\.github', 'r') then
		local token = file:read('a')
		file:close()
		return token:startswith('ghp_') and token:len() == 40 and token
	end
	return nil
end

local function fetch(host, path, callback)
	local finished = false
	async_http.init(host, path, function(body, headers, status_code)
		if status_code == 403 then
			local expire_at = os.date('%d-%m %H:%M', headers['X-Ratelimit-Reset'])
			for i = 1, 5 do
				util.toast($'You are currently being ratelimited by GitHub.\nThis will expire at {expire_at}.')
			end
			util.stop_script()
		elseif status_code == 404 then
			goto continue
		end

		pcall(callback, body, headers, status_code)

		::continue::
		finished = true
	end, function()
		util.toast($'Request to {host}{path} failed to send.')
		finished = true
	end)
	if token := get_github_auth() then
		async_http.add_header('Authorization', 'Bearer ' .. token)
	end
	async_http.dispatch()

	repeat
		util.yield()
	until finished
end

local function make_request(path, callback)
	fetch('https://api.github.com', '/repos/stagnate6628/stand-themerepo/contents/' .. path, function(body, headers, status_code) 
		pcall(callback, body, headers, status_code)
	end)
end

local function write_file(path, body)
	if not filesystem.is_dir(path:match('^(.+)[\\/]')) then
		filesystem.mkdirs(path:match('^(.+)[\\/]'))
	end

	local file = io.open(path, 'wb')
	file:write(body)
	file:close()
end

local function download_file(host, path, file_path, callback)
	fetch(host, path, function(body, headers, status_code)
		if type(file_path) == 'string' then
			file_path = {file_path}
		end

		for file_path as path do
			write_file(path, body)
		end
		log($'Wrote {path} to {file_path}')
	end)
end

local function empty_dir(dir)
  for io.listdir(dir) as path do
  	if filesystem.is_regular_file(path) then
  		io.remove(path)
  		continue
  	end

  	empty_dir(path)
  	io.remove(path)
  end
end

local stand_dir = filesystem.stand_dir()

local header_dir = stand_dir .. 'Headers\\Custom Header\\'
local theme_dir = stand_dir .. 'Theme\\'
local custom_dir = theme_dir .. 'Custom\\'
local tabs_dir = theme_dir .. 'Tabs\\'

local resources_dir = filesystem.resources_dir() .. 'ThemeRepo\\'
local themes_dir = resources_dir .. 'Themes\\'
local headers_dir = resources_dir .. 'Headers\\'
local backups_dir = resources_dir .. 'Backups\\'

local function debug_log(msg)
  local log_path = resources_dir .. 'log.txt'
  if not io.exists(log_path) then
    io.open(log_path, 'wb'):close()
  end

  local log_file = io.open(log_path, 'a+')
  log_file:write('[' .. os.date('%x %I:%M:%S %p') .. '] ' .. msg .. '\n')
  log_file:close()
end

local function reload_textures()
	menu.ref_by_path('Stand>Settings>Appearance>Textures>Reload Textures'):trigger()
end

local function reload_font()
	menu.ref_by_path('Stand>Settings>Appearance>Font & Text>Reload Font'):trigger()
end

local function header_hide()
	menu.ref_by_path('Stand>Settings>Appearance>Header>Header>Be Gone'):trigger()
end

local function header_custom()
	menu.ref_by_path('Stand>Settings>Appearance>Header>Header>Custom'):trigger()
end

local function get_all_files(path, files = {})
	path ..= '?ref=refactor-downloader'
	log($'reading {path}')

	make_request(path, function(body, headers, status_code)
		body = soup.json.decode(body)

		for body as file do
			if file.type == 'file' then
				table.insert(files, file.path)
				continue
			end

			get_all_files(file.path, files)
		end
	end)

	return files
end

local function load_theme(theme_name)
	util.toast($'Loading {theme_name} from profile...')

	reload_textures()
	reload_font()

	menu.ref_by_path('Stand>Profiles'):trigger()
	util.yield(100)
	menu.ref_by_path('Stand'):trigger()
	util.yield(100)
	menu.ref_by_path('Stand>Profiles'):trigger()

	menu.ref_by_path('Stand>Lua Scripts')
	util.yield(100)
	menu.ref_by_path('Stand')
	util.yield(100)
	menu.ref_by_path('Stand>Lua Scripts')

	local ref = menu.ref_by_path('Stand>Profiles>' .. theme_name)
	ref:refByRelPath('Load'):trigger()
	util.yield(100)
	ref:refByRelPath('Active'):trigger()
	util.yield(100)
	ref:refByRelPath('Load'):trigger()
end

local function download_theme(theme_name)
	util.toast($'Downloading {theme_name}...')

	empty_dir(theme_dir)
	empty_dir(header_dir)

	header_hide()

	local files
	local path = themes_dir .. theme_name .. '\\.manifest'

	if not filesystem.exists(path) then
		files = get_all_files('Themes/' .. theme_name)
		write_file(path, table.concat(files, '\n'))
		debug_log($'Created manifest for theme: {theme_name}')
	else
		local f = io.open(path, 'r')
		files = f:read('*a'):split('\n')
		f:close()
		debug_log($'Found manifest for theme: {theme_name}')
	end

	local i = 0
	for files as file do
		i += 1

		local path = file:gsub('Themes/' .. theme_name .. '/', '')
		local dir = path:match('(.-)/[^/]-$') or 'none'

		log($'{path} : {dir}')

		-- todo: improve 
		if not dir or not table.contains({ 'Lua Scripts', 'Theme', 'Theme/Tabs', 'Theme/Custom', 
			'Profiles', 'Headers/Custom Header' 
		}, dir) then
			if not filesystem.exists(themes_dir .. theme_name .. $'\\{path}') then
				download_file(
					'https://raw.githubusercontent.com',
					$'/stagnate6628/stand-themerepo/refactor-downloader/Themes/{theme_name}/{path}',
					themes_dir .. theme_name .. $'\\{path}'
				)
			end
			continue
		end

		if not filesystem.exists(file) then
			download_file(
				'https://raw.githubusercontent.com',
				$'/stagnate6628/stand-themerepo/refactor-downloader/{file}',
				{stand_dir .. path:gsub('/', '\\'), resources_dir .. file:gsub('/', '\\')}
			)
		end

	end

	repeat 
		util.log('yielding...')
		util.draw_centred_text($'{i}/' .. #files)
		util.yield()
	until i == #files

	load_theme(theme_name)
end

local f = io.open(resources_dir .. 'themes.txt', 'r')
local body = f:read('*a'):split('\n')
f:close()
root:list_action('Themes', {}, '', body, function(_, menu_name)
	download_theme(menu_name)
end)

local config_root = root:list('Configuration', {}, '')
config_root:textslider_stateful('Reset', {}, '', { 'Theme', 'Font', 'Header' }, function(idx) 
	switch idx do
		case 1:
			empty_dir(theme_dir)
			reload_textures()
			reload_font()
		break
		case 2:
			io.remove(theme_dir .. 'Font.spritefont')
			reload_font()
		break
		case 3:
			empty_dir(header_dir)
			header_hide()
			header_custom()
			header_hide()
		break
	end
end)

config_root:textslider_stateful('Update', {}, '', { 'Themes', 'Headers' }, function(idx)
	local name = 'themes.txt'
	if idx == 2 then
		name = 'headers.txt'
	end

	download_file(
		'https://raw.githubusercontent.com',
		'/stagnate6628/stand-themerepo/main/' .. name,
		resources_dir .. name
	)

	util.restart_script()
end)